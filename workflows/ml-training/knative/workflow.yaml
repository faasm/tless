# -----
# This YAML describes the FINRA workflow for TLess in Knative.
#
# See here for more details on the workflow:
# https://github.com/faasm/experiment-accless/blob/main/workflows/finra/README.md
# -----
apiVersion: messaging.knative.dev/v1
kind: Channel
metadata:
  name: ingress-to-partition
  namespace: accless
spec:
  channelTemplate:
    apiVersion: messaging.knative.dev/v1
    kind: InMemoryChannel
---
apiVersion: messaging.knative.dev/v1
kind: Channel
metadata:
  name: partition-to-pca
  namespace: accless
spec:
  channelTemplate:
    apiVersion: messaging.knative.dev/v1
    kind: InMemoryChannel
---
apiVersion: messaging.knative.dev/v1
kind: Channel
metadata:
  name: pca-to-rf
  namespace: accless
spec:
  channelTemplate:
    apiVersion: messaging.knative.dev/v1
    kind: InMemoryChannel
  delivery:
    backoffDelay: PT10S
    backoffPolicy: linear
    retry: 10
---
apiVersion: messaging.knative.dev/v1
kind: Channel
metadata:
  name: rf-to-validation
  namespace: accless
spec:
  channelTemplate:
    apiVersion: messaging.knative.dev/v1
    kind: InMemoryChannel
---
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: ml-training-partition
  namespace: accless
spec:
  template:
    spec:
      runtimeClassName: ${RUNTIME_CLASS_NAME}
      containers:
        - image: sc2cr.io/accless-knative-worker:${ACCLESS_VERSION}
          ports:
            - containerPort: 8080
          workingDir: /workflows/ml-training/knative
          command: [ "./target/release/accless-cloudevent-handler" ]
          env:
            - name: ACCLESS_MODE
              value: "${ACCLESS_MODE}"
    metadata:
      labels:
        accless.workflows/name: ml-training-partition
---
apiVersion: sinks.knative.dev/v1alpha1
kind: JobSink
metadata:
  name: ml-training-pca
  namespace: accless
spec:
  job:
    spec:
      completions: 1
      parallelism: 1
      backoffLimit: 4
      # Clean-up jobs once they are finished
      ttlSecondsAfterFinished: 30
      template:
        spec:
          runtimeClassName: ${RUNTIME_CLASS_NAME}
          restartPolicy: OnFailure
          containers:
            - name: main
              image: sc2cr.io/accless-knative-worker:${ACCLESS_VERSION}
              ports:
                - containerPort: 8080
              workingDir: /workflows/ml-training/knative
              command: [ "./target/release/accless-cloudevent-handler" ]
              env:
                - name: CE_FROM_FILE
                  value: "on"
                - name: ACCLESS_MODE
                  value: "${ACCLESS_MODE}"
        metadata:
          labels:
            accless.workflows/name: ml-training-pca
---
apiVersion: sinks.knative.dev/v1alpha1
kind: JobSink
metadata:
  name: ml-training-rf
  namespace: accless
spec:
  job:
    spec:
      completions: 1
      parallelism: 1
      backoffLimit: 4
      # Clean-up jobs once they are finished
      ttlSecondsAfterFinished: 30
      template:
        spec:
          runtimeClassName: ${RUNTIME_CLASS_NAME}
          restartPolicy: OnFailure
          containers:
            - name: main
              image: sc2cr.io/accless-knative-worker:${ACCLESS_VERSION}
              ports:
                - containerPort: 8080
              workingDir: /workflows/ml-training/knative
              command: [ "./target/release/accless-cloudevent-handler" ]
              env:
                - name: CE_FROM_FILE
                  value: "on"
                - name: ACCLESS_MODE
                  value: "${ACCLESS_MODE}"
        metadata:
          labels:
            accless.workflows/name: ml-training-rf
---
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: ml-training-validation
  namespace: accless
spec:
  template:
    spec:
      runtimeClassName: ${RUNTIME_CLASS_NAME}
      containers:
        - image: sc2cr.io/accless-knative-worker:${ACCLESS_VERSION}
          ports:
            - containerPort: 8080
          workingDir: /workflows/ml-training/knative
          command: [ "./target/release/accless-cloudevent-handler" ]
          env:
            - name: ACCLESS_MODE
              value: "${ACCLESS_MODE}"
    metadata:
      labels:
        accless.workflows/name: ml-training-validation
      annotations:
        # High grace-period to guarantee the same instance processes requests
        # for all jobs in the JobSink (i.e. instances of the audit function)
        autoscaling.knative.dev/scale-to-zero-pod-retention-period: "1m"
---
apiVersion: messaging.knative.dev/v1
kind: Subscription
metadata:
  name: edge-one-subscription
  namespace: accless
spec:
  channel:
    apiVersion: messaging.knative.dev/v1
    kind: Channel
    name: ingress-to-partition
  reply:
    ref:
      apiVersion: messaging.knative.dev/v1
      kind: InMemoryChannel
      name: partition-to-pca
  subscriber:
    ref:
      apiVersion: serving.knative.dev/v1
      kind: Service
      name: ml-training-partition
---
apiVersion: messaging.knative.dev/v1
kind: Subscription
metadata:
  name: edge-two-subscription
  namespace: accless
spec:
  channel:
    apiVersion: messaging.knative.dev/v1
    kind: Channel
    name: partition-to-pca
  subscriber:
    ref:
      apiVersion: sinks.knative.dev/v1alpha1
      kind: JobSink
      name: ml-training-pca
---
apiVersion: messaging.knative.dev/v1
kind: Subscription
metadata:
  name: edge-three-subscription
  namespace: accless
spec:
  channel:
    apiVersion: messaging.knative.dev/v1
    kind: Channel
    name: pca-to-rf
  subscriber:
    ref:
      apiVersion: sinks.knative.dev/v1alpha1
      kind: JobSink
      name: ml-training-rf
---
apiVersion: messaging.knative.dev/v1
kind: Subscription
metadata:
  name: edge-four-subscription
  namespace: accless
spec:
  channel:
    apiVersion: messaging.knative.dev/v1
    kind: Channel
    name: rf-to-validation
  subscriber:
    ref:
      apiVersion: serving.knative.dev/v1
      kind: Service
      name: ml-training-validation
---
